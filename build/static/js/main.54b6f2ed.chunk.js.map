{"version":3,"sources":["spotify.js","Login.js","SidebarOption.js","DataLayer.js","Sidebar.js","Header.js","SongRow.js","Body.js","Footer.js","Player.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["loginUrl","join","Login","className","src","alt","href","SidebarOption","title","Icon","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Sidebar","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","items","map","playlist","name","Header","user","placeholder","Avatar","images","url","display_name","SongRow","track","album","artists","artist","Body","spotify","discover_weekly","description","PlayCircleFilled","Favorite","fontSize","MoreHoriz","tracks","item","Footer","Grid","container","spacing","xs","Slider","aria-labelledby","Player","SpotifyWebApi","App","token","dispatch","useEffect","hash","window","location","substring","split","reduce","initial","parts","decodeURIComponent","_token","access_token","type","setAccessToken","getMe","then","getUserPlaylists","getPlaylist","response","Boolean","hostname","match","state","action","console","log","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54b6f2ed.chunk.js","sourcesContent":["// https://developer.spotify.com/documentation/web-playback-sdk/quick-start/#\r\n\r\nexport const authEndpoint = \"https://accounts.spotify.com/authorize\";\r\nconst redirectUri= \"http://localhost:3000\";\r\n\r\nconst clientId = \"4ce342be30a34b90a270f0a621808484\";\r\n\r\nconst scopes = [\r\n    \"user-read-currently-playing\",\r\n    \"user-read-recently-played\",\r\n    \"user-read-playback-state\",\r\n    \"user-top-read\",\r\n    \"user-modify-playback-state\",\r\n];\r\n\r\nexport const getTokenFromUrl = () => {\r\n    return window.location.hash\r\n        .substring(1)\r\n        .split('&')\r\n        .reduce((initial, item) => {\r\n            let parts = item.split('=');\r\n            initial[parts[0]]=\r\n            decodeURIComponent(parts[1]);\r\n\r\n            return initial;\r\n        }, {});\r\n}\r\n\r\nexport const loginUrl= `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\r\n    \"%20\"\r\n  )}&response_type=token&show_dialog=true`;\r\n","import React from 'react'\r\nimport './Login.css';\r\nimport { loginUrl } from './spotify';\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"login\">\r\n        <img \r\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n        alt=\"\"\r\n      />\r\n       <a href={loginUrl}>LOGIN WITH SPOTIFY</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport './SidebarOption.css';\r\n\r\nfunction SidebarOption({ title, Icon }) {\r\n  return (\r\n    <div className=\"sidebarOption\">\r\n      {Icon && <Icon className=\"sidebarOption__icon\" />}\r\n       {Icon ? <h4>{title}</h4> : <p>{title}</p>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarOption","import React,{ createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const DataLayerContext = createContext();\r\n\r\nexport const DataLayer = ({ initialState, reducer, children }) => (\r\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </DataLayerContext.Provider>\r\n);\r\n\r\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react';\r\nimport './Sidebar.css';\r\nimport SidebarOption from './SidebarOption';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\r\nimport { useDataLayerValue } from './DataLayer';\r\n\r\n\r\nfunction Sidebar() {\r\n   const [{ playlists }, dispatch] = useDataLayerValue();\r\n\r\n  return (\r\n    <div className=\"sidebar\">\r\n     <img\r\n        className=\"sidebar__logo\"\r\n        src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\"\r\n        alt=\"sidebar-logo\"\r\n        />\r\n\r\n        <SidebarOption Icon={HomeIcon} title= \"Home\"/>\r\n        <SidebarOption Icon={SearchIcon} title= \"Search\"/>\r\n        <SidebarOption Icon={LibraryMusicIcon} title= \"Your Library\"/>\r\n\r\n        <br/>\r\n        <strong className=\"sodebar__title\">PLAYLISTS</strong>\r\n        <hr/>\r\n        \r\n        {playlists?.items?.map(playlist => (\r\n          <SidebarOption title={playlist.name} />\r\n        ))}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar","import React from 'react';\r\nimport './Header.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useDataLayerValue } from './DataLayer';\r\n\r\nfunction Header() {\r\n    const [{ user }, dispatch] = useDataLayerValue();\r\n\r\n  return (\r\n    <div className=\"header\">\r\n        <div className=\"header__left\">\r\n            <SearchIcon />\r\n            <input \r\n                placeholder=\"Search for Artists, Songs, Podcasts, etc...\"\r\n            />\r\n        </div>\r\n        <div className=\"header__right\">\r\n            <Avatar src={user?.images[0]?.url} alt={user?.display_name}/>\r\n            <h4>{user?.display_name}</h4>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport './SongRow.css';\r\n\r\nfunction SongRow({ track }) {\r\n    return (\r\n        <div className=\"songRow\">\r\n            <img className=\"songRow__album\" src={track.album.images[0].url} alt='' />\r\n            <div className=\"songRow__info\">\r\n                <h1>{track.name}</h1>\r\n                <p>{track.artists.map((artist) => artist.name).join(\", \")}</p>\r\n                {track.album.name}\r\n                \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SongRow","import React from 'react';\r\nimport './Body.css';\r\nimport Header from './Header';\r\nimport { useDataLayerValue } from './DataLayer';\r\nimport { Favorite, MoreHoriz, PlayCircleFilled } from '@material-ui/icons';\r\nimport SongRow from './SongRow';\r\n\r\n\r\nfunction Body({ spotify }) {\r\n  const [{ discover_weekly }, dispatch] = useDataLayerValue();\r\n\r\n\r\n  return (\r\n    <div className=\"body\">\r\n      <Header spotify={spotify} />\r\n\r\n      <div className=\"body__info\">\r\n        <img src={discover_weekly?.images[0].url} alt=\"\" />\r\n        <div className=\"body__infoText\">\r\n          <strong>PLAYLIST</strong>\r\n          <h2>{discover_weekly?.name}</h2>\r\n          <p>{discover_weekly?.description}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"body__songs\">\r\n        <div className=\"body__icons\">\r\n          <PlayCircleFilled className=\"body__shuffle\"/>\r\n          <Favorite fontSize=\"large\" />\r\n          <MoreHoriz />\r\n        </div>\r\n        {discover_weekly?.tracks.items.map(item => \r\n          <SongRow track={item.track} />\r\n          )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Body","import React from 'react';\r\nimport './Footer.css';\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport SkipPreviousIcon from \"@material-ui/icons/SkipPrevious\";\r\nimport PlaylistPlayIcon from \"@material-ui/icons/PlaylistPlay\";\r\nimport VolumeDownIcon from \"@material-ui/icons/VolumeDown\";\r\nimport SkipNextIcon from \"@material-ui/icons/SkipNext\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport { Grid, Slider } from \"@material-ui/core\";\r\n\r\nfunction Footer() {\r\n\r\n  return (\r\n    <div className=\"footer\">\r\n      <div className=\"footer__left\">\r\n        <img className=\"footer__albumLogo\"\r\n          src=\"https://lastfm.freetls.fastly.net/i/u/500x500/03b4b7ae49253f66a4280fc534b78952.jpg\"\r\n          alt=\"\"\r\n        />\r\n        <div className=\"footer__songInfo\">\r\n          <h4>Mayonaka no Door / Stay With Me</h4>\r\n          <p>Miki Matsubara</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"footer__center\">\r\n        <ShuffleIcon className=\"footer__green\" />\r\n        <SkipPreviousIcon className=\"footer__icon\" />\r\n        <PlayCircleOutlineIcon fontSize=\"large\" className=\"footer__icon\" />\r\n        <SkipNextIcon className=\"footer__icon\" />\r\n        <RepeatIcon className=\"footer__green\" />\r\n      </div>\r\n\r\n      <div className=\"footer__right\">\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            <PlaylistPlayIcon />\r\n          </Grid>\r\n          <Grid item>\r\n            <VolumeDownIcon />\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Slider aria-labelledby=\"continuous-slider\" />\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react';\r\nimport './Player.css';\r\nimport Sidebar from './Sidebar';\r\nimport Body from './Body';\r\nimport Footer from './Footer';\r\n\r\nconst Player = ({ spotify }) => {\r\n  return (\r\n  <div className=\"player\">\r\n    <div className=\"player__body\">\r\n      <Sidebar />\r\n      <Body spotify={spotify} />\r\n    </div>\r\n\r\n    <Footer />\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Player","import React, { useEffect, useState } from 'react';\nimport './index.css';\n//import './App.css';\nimport Login from './Login.js';\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from './Player';\nimport { useDataLayerValue } from './DataLayer';\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  const [{ user, token }, dispatch] = useDataLayerValue();\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\"\n    const _token = hash.access_token;\n\n    if (_token) {\n\n      dispatch({\n        type: \"SET_TOKEN\",\n        token: _token,\n      })\n\n      spotify.setAccessToken(_token);\n\n\n      spotify.getMe().then(user => {\n\n        dispatch({\n          type: \"SET_USER\",\n          user: user\n        })\n      });\n\n      spotify.getUserPlaylists().then((playlists) => {\n        dispatch({\n          type: \"SET_PLAYLISTS\",\n          playlists: playlists\n        })\n      });\n\n      spotify.getPlaylist('37i9dQZEVXbqifUM2zfSvm').then(response => {\n        dispatch({\n          type: \"SET_DISCOVER_WEEKLY\",\n          discover_weekly: response,\n        })\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {\n        token ? (\n          <Player spotify={spotify} />\n        ) : (\n          <Login Login={Login}/>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n}","export const initialState ={\r\n    user: null, \r\n    playlists: [],\r\n    playing: false,\r\n    item: null,\r\n};\r\n\r\nconst reducer = (state, action) =>{\r\n    console.log(action);\r\n\r\n    switch(action.type) {\r\n        case \"SET_USER\":\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n            case \"SET_TOKEN\": \r\n            return {\r\n                ...state,\r\n                token: action.token,\r\n            };\r\n            case \"SET_PLAYLISTS\":\r\n                return{\r\n                    ...state,\r\n                    playlists: action.playlists,\r\n                };\r\n\r\n                case \"SET_DISCOVER_WEEKLY\":\r\n                    return {\r\n                        ...state,\r\n                        discover_weekly: action.discover_weekly,\r\n                    };\r\n\r\n        default: \r\n            return state;            \r\n    }\r\n}\r\n\r\nexport default reducer;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { DataLayer } from \"./DataLayer\";\nimport reducer, { initialState } from \"./reducer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      <App />\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}